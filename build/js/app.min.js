(function () {
'use strict';

// jshint esversion: 6
const MASHAPE_KEY = 'AyBmxPBKYUmshcuDOEgra2staJv9p1Tm8cgjsnsk5j9j5dONbK';

function getSearchResults(userQuery) {
  let ajaxSettings = {
    url: 'https://spoonacular-recipe-food-nutrition-v1.p.mashape.com/food/site/search',
    data: {
      query: userQuery
    },
    dataType: 'json',
    headers: {
      'X-Mashape-Key': MASHAPE_KEY,
      Accept: 'application/json'
    }
  };
  return $.ajax(ajaxSettings);
}

function getRecipeDetails(id) {
  let ajaxSettings = {
    url: 'https://spoonacular-recipe-food-nutrition-v1.p.mashape.com/recipes/'+id+'/information',
    data: {
      includeNutrition: false
    },
    dataType: 'json',
    headers: {
      'X-Mashape-Key': MASHAPE_KEY,
      Accept: 'application/json'
    }
  };
  return $.ajax(ajaxSettings);
}

// function getSearchResultsByIngredient(myIngredients, numResults=5) {
//   let ajaxSettings = {
//     url: 'https://spoonacular-recipe-food-nutrition-v1.p.mashape.com/recipes/findByIngredients',
//     data: {
//       fillIngredients: false,
//       ingredients: myIngredients,
//       limitLicense: false,
//       number: numResults,
//       ranking: 1
//     },
//     dataType: 'json',
//     headers: {
//       'X-Mashape-Key': MASHAPE_KEY,
//       Accept: 'application/json'
//     }
//   };
//   return $.ajax(ajaxSettings);
// }

// jshint esversion:6
const CLIENT_ID = 'myj4y8uy5mlsg9s';
const REDIRECT_URI$1 = 'http://localhost/spoon-n-drop/build/';
const STORAGE_PATH = '/my-recipes.json';

function OAuth(){
  let url = 'https://www.dropbox.com/oauth2/authorize?'+
  'response_type=token&'+
  'client_id='+CLIENT_ID+'&'+
  'redirect_uri='+REDIRECT_URI$1;
  window.location.replace(url);
}
/*GET and param urls used to avoid CORS pre-flight*/
function getMyRecipes() {
  let ajaxSettings = {
    url: 'https://content.dropboxapi.com/2/files/download',
    method: 'GET',
    dataType: 'json',
    data: {
      authorization: 'Bearer '+ window.sessionStorage.getItem('accessToken'),
      arg: JSON.stringify({path: STORAGE_PATH}),
      reject_cors_preflight: true
    }
  };
  return $.ajax(ajaxSettings);
}

function deleteFileHelper() {
  let ajaxSettings = {
    url: 'https://api.dropboxapi.com/2/files/delete',
    method: 'POST',
    dataType: 'json',
    contentType: 'application/json',
    data: JSON.stringify({path: STORAGE_PATH}),
    headers : {
      Authorization: 'Bearer '+window.sessionStorage.getItem('accessToken')
    }
  };
  return $.ajax(ajaxSettings);
}

function postMyRecipes(state) {
  let ajaxSettings = {
    url: 'https://content.dropboxapi.com/2/files/upload',
    method: 'POST',
    contentType: 'application/octet-stream',
    data: JSON.stringify(state.myRecipes),
    headers: {
      Authorization: 'Bearer '+window.sessionStorage.getItem('accessToken'),
      'Dropbox-API-Arg': JSON.stringify({path: STORAGE_PATH})
    }
  };
  return $.ajax(ajaxSettings);
}

// jshint esversion:6

function renderPage() {
  $('main').find('.viewable').addClass('hide');
  $('main').find('.viewable').removeClass('viewable');
  $('#new-recipe-page').removeClass('hide');
  $('#new-recipe-page').addClass('viewable');
}

function renderNewListItem(element, keyPressed) {
  if(keyPressed === 'Enter') {
    element.after('<li><input type="text" placeholder="new item"></li>');
  }
}

function addRecipe(state) {
  let title = $('#recipe-title').val();
  let time = $('#ready-in-mins').val();
  let ingredients = [];
  $('#ingredients').find('input').each(
    (index, element) => ingredients.push($(element).val())
  );

  let steps = [];
  $('#steps').find('input').each(
    (index, element) => steps.push($(element).val())
  );

  state.myRecipes.push({
    title: title,
    readyInMinutes: time,
    listofIngredients: ingredients,
    instructions: steps
  });
}

//jshint esversion: 6

const REDIRECT_URI = 'http://localhost/spoon-n-drop/build/';
function initAppState() {
  return {
    resultList: [],
    currentView: 'search',
    previousHtml: '',
    myRecipes: [],//list of recipe objs
    loggedIn: false,
    accessToken: ''
  };
}


function makeResultsList(resultObj, state) {
  let previewList = [];
  let recipeId = '';
  $.each(resultObj.Recipes, function(ind, obj) {
    recipeId = obj.link.split('-').pop();
    console.log(recipeId);
    // previewList.push({
    state.resultList.push({
      title: obj.name,
      imgUrl: obj.image,
      id: recipeId
    });
  });
  // state.resultList = previewList;
}

function renderResultsList(state){
  let previewHtml = '';
  $.each(state.resultList, function(ind, obj) {
    previewHtml += '<li data-recipeid="'+obj.id+'"><a>'+
    '<img src="'+obj.imgUrl+'" alt="'+obj.title+'">'+
    '<span>'+obj.title+'</span>'+
    '<form><input type="submit"></form>'+
    '</li></a>';
  });
  $('#search-results').html(previewHtml);
}

function simplifyRecipeDetails(recipeObj) {
  /*Refer to 'get-recipe-info-sample-response.json' for recipeObj's complete structure*/
  let ingredients = [];
  $.each(recipeObj.extendedIngredients, function(ind, obj) {
    ingredients.push({
      name: obj.name,
      amount: obj.amount + obj.unitLong
    });
  });
  let steps = [];
  $.each(recipeObj.analyzedInstructions[0].steps, function(ind, obj) {
    steps.push(obj.step);
  });
  return {
    title: recipeObj.title,
    time: recipeObj.readyInMinutes,
    listofIngredients: ingredients,
    instructions: steps
  };
}

function renderRecipeDetails(simpleRecipeObj, state) {
  state.previousHtml = $('main').html();
  let recipeInfoHtml ='<span><h1>'+
    simpleRecipeObj.title+'</h1>'+
    '<h2>'+simpleRecipeObj.time+'minutes</h2></span><ul>';
  $.each(simpleRecipeObj.listofIngredients, function(ind, obj) {
    recipeInfoHtml += '<li>'+obj.amount+obj.name+'</li>';
  });
  recipeInfoHtml += '</ul><ol>';
  $.each(simpleRecipeObj.instructions, function(ind,val) {
    recipeInfoHtml += '<li>'+val+'</li>';
  });
  recipeInfoHtml += '</ol>';
  $('main').html(recipeInfoHtml);
}


$(function main() {
  let appState = initAppState();
  let token = window.sessionStorage.getItem('accessToken');

  if(token !== 'undefined' && token !== null) {
    appState.loggedIn = true;
  }

  else {
    let redirectResponse = window.location.href.split('#')[1];
    if(typeof redirectResponse != 'undefined') {
      window.sessionStorage.setItem('accessToken', redirectResponse.split('&')[0].split('=')[1]);
      window.location.replace(REDIRECT_URI);
      appState.loggedIn = true;
    }
  }

  $('#search-form').on('submit', function(event) {
    event.preventDefault();
    let query = $(this).find('#search-bar').val();

    let xhrPromise = getSearchResults(query);
    xhrPromise.done(function (data) {
      makeResultsList(data,appState);
      renderResultsList(appState);
    });
  });

  $('#search-results').on('click','li',function() {
    let xhrPromise = getRecipeDetails($(this).data('recipeid'));
    xhrPromise.done(
      data => renderRecipeDetails(simplifyRecipeDetails(data), appState)
    );
  });

  $('#login').on('click', function() {
    if(!appState.loggedIn) {OAuth();}
  });

  $('#my-recipes').on('click', function() {
    if(appState.loggedIn) {
      let xhr = getMyRecipes();
      xhr.then(
        function success(data) {
          appState.myRecipes = data;
        },
        function error(jqxhr) {
          console.log(jqxhr.responseText);
        }
      );
    }
  });

  $('#search-for-recipes').on('click', function () {

  });

  $('#create-recipe').on('click', () => renderPage() );
  $('.create-list').on('keypress', 'li',
  function (event) {
    renderNewListItem($(this), event.key);
  });
  $('#new-recipe-page').find('form').on('click', 'button', function(event) {
      event.preventDefault();
      addRecipe(appState);
      // let xhr = dropbox.deleteFileHelper();
      deleteFileHelper().always(
        data => postMyRecipes(appState).then(
          data => console.log('Success'),
          jqxhr => console.log(jqxhr.responseText)
        )
      );
    });
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9zcG9vbmFjdWxhci5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvZHJvcGJveC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvcGFnZXMtY3JlYXRlLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvYXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGpzaGludCBlc3ZlcnNpb246IDZcbmNvbnN0IE1BU0hBUEVfS0VZID0gJ0F5Qm14UEJLWVVtc2hjdURPRWdyYTJzdGFKdjlwMVRtOGNnanNuc2s1ajlqNWRPTmJLJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlYXJjaFJlc3VsdHModXNlclF1ZXJ5KSB7XG4gIGxldCBhamF4U2V0dGluZ3MgPSB7XG4gICAgdXJsOiAnaHR0cHM6Ly9zcG9vbmFjdWxhci1yZWNpcGUtZm9vZC1udXRyaXRpb24tdjEucC5tYXNoYXBlLmNvbS9mb29kL3NpdGUvc2VhcmNoJyxcbiAgICBkYXRhOiB7XG4gICAgICBxdWVyeTogdXNlclF1ZXJ5XG4gICAgfSxcbiAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdYLU1hc2hhcGUtS2V5JzogTUFTSEFQRV9LRVksXG4gICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuICQuYWpheChhamF4U2V0dGluZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVjaXBlRGV0YWlscyhpZCkge1xuICBsZXQgYWpheFNldHRpbmdzID0ge1xuICAgIHVybDogJ2h0dHBzOi8vc3Bvb25hY3VsYXItcmVjaXBlLWZvb2QtbnV0cml0aW9uLXYxLnAubWFzaGFwZS5jb20vcmVjaXBlcy8nK2lkKycvaW5mb3JtYXRpb24nLFxuICAgIGRhdGE6IHtcbiAgICAgIGluY2x1ZGVOdXRyaXRpb246IGZhbHNlXG4gICAgfSxcbiAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdYLU1hc2hhcGUtS2V5JzogTUFTSEFQRV9LRVksXG4gICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuICQuYWpheChhamF4U2V0dGluZ3MpO1xufVxuXG4vLyBmdW5jdGlvbiBnZXRTZWFyY2hSZXN1bHRzQnlJbmdyZWRpZW50KG15SW5ncmVkaWVudHMsIG51bVJlc3VsdHM9NSkge1xuLy8gICBsZXQgYWpheFNldHRpbmdzID0ge1xuLy8gICAgIHVybDogJ2h0dHBzOi8vc3Bvb25hY3VsYXItcmVjaXBlLWZvb2QtbnV0cml0aW9uLXYxLnAubWFzaGFwZS5jb20vcmVjaXBlcy9maW5kQnlJbmdyZWRpZW50cycsXG4vLyAgICAgZGF0YToge1xuLy8gICAgICAgZmlsbEluZ3JlZGllbnRzOiBmYWxzZSxcbi8vICAgICAgIGluZ3JlZGllbnRzOiBteUluZ3JlZGllbnRzLFxuLy8gICAgICAgbGltaXRMaWNlbnNlOiBmYWxzZSxcbi8vICAgICAgIG51bWJlcjogbnVtUmVzdWx0cyxcbi8vICAgICAgIHJhbmtpbmc6IDFcbi8vICAgICB9LFxuLy8gICAgIGRhdGFUeXBlOiAnanNvbicsXG4vLyAgICAgaGVhZGVyczoge1xuLy8gICAgICAgJ1gtTWFzaGFwZS1LZXknOiBNQVNIQVBFX0tFWSxcbi8vICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nXG4vLyAgICAgfVxuLy8gICB9O1xuLy8gICByZXR1cm4gJC5hamF4KGFqYXhTZXR0aW5ncyk7XG4vLyB9XG4iLCIvLyBqc2hpbnQgZXN2ZXJzaW9uOjZcbmNvbnN0IENMSUVOVF9JRCA9ICdteWo0eTh1eTVtbHNnOXMnO1xuY29uc3QgUkVESVJFQ1RfVVJJID0gJ2h0dHA6Ly9sb2NhbGhvc3Qvc3Bvb24tbi1kcm9wL2J1aWxkLyc7XG5jb25zdCBTVE9SQUdFX1BBVEggPSAnL215LXJlY2lwZXMuanNvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBPQXV0aCgpe1xuICBsZXQgdXJsID0gJ2h0dHBzOi8vd3d3LmRyb3Bib3guY29tL29hdXRoMi9hdXRob3JpemU/JytcbiAgJ3Jlc3BvbnNlX3R5cGU9dG9rZW4mJytcbiAgJ2NsaWVudF9pZD0nK0NMSUVOVF9JRCsnJicrXG4gICdyZWRpcmVjdF91cmk9JytSRURJUkVDVF9VUkk7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHVybCk7XG59XG4vKkdFVCBhbmQgcGFyYW0gdXJscyB1c2VkIHRvIGF2b2lkIENPUlMgcHJlLWZsaWdodCovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TXlSZWNpcGVzKCkge1xuICBsZXQgYWpheFNldHRpbmdzID0ge1xuICAgIHVybDogJ2h0dHBzOi8vY29udGVudC5kcm9wYm94YXBpLmNvbS8yL2ZpbGVzL2Rvd25sb2FkJyxcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgZGF0YToge1xuICAgICAgYXV0aG9yaXphdGlvbjogJ0JlYXJlciAnKyB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnYWNjZXNzVG9rZW4nKSxcbiAgICAgIGFyZzogSlNPTi5zdHJpbmdpZnkoe3BhdGg6IFNUT1JBR0VfUEFUSH0pLFxuICAgICAgcmVqZWN0X2NvcnNfcHJlZmxpZ2h0OiB0cnVlXG4gICAgfVxuICB9O1xuICByZXR1cm4gJC5hamF4KGFqYXhTZXR0aW5ncyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVGaWxlSGVscGVyKCkge1xuICBsZXQgYWpheFNldHRpbmdzID0ge1xuICAgIHVybDogJ2h0dHBzOi8vYXBpLmRyb3Bib3hhcGkuY29tLzIvZmlsZXMvZGVsZXRlJyxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe3BhdGg6IFNUT1JBR0VfUEFUSH0pLFxuICAgIGhlYWRlcnMgOiB7XG4gICAgICBBdXRob3JpemF0aW9uOiAnQmVhcmVyICcrd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2FjY2Vzc1Rva2VuJylcbiAgICB9XG4gIH07XG4gIHJldHVybiAkLmFqYXgoYWpheFNldHRpbmdzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3RNeVJlY2lwZXMoc3RhdGUpIHtcbiAgbGV0IGFqYXhTZXR0aW5ncyA9IHtcbiAgICB1cmw6ICdodHRwczovL2NvbnRlbnQuZHJvcGJveGFwaS5jb20vMi9maWxlcy91cGxvYWQnLFxuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyxcbiAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShzdGF0ZS5teVJlY2lwZXMpLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIEF1dGhvcml6YXRpb246ICdCZWFyZXIgJyt3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnYWNjZXNzVG9rZW4nKSxcbiAgICAgICdEcm9wYm94LUFQSS1BcmcnOiBKU09OLnN0cmluZ2lmeSh7cGF0aDogU1RPUkFHRV9QQVRIfSlcbiAgICB9XG4gIH07XG4gIHJldHVybiAkLmFqYXgoYWpheFNldHRpbmdzKTtcbn1cbiIsIi8vIGpzaGludCBlc3ZlcnNpb246NlxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyUGFnZSgpIHtcbiAgJCgnbWFpbicpLmZpbmQoJy52aWV3YWJsZScpLmFkZENsYXNzKCdoaWRlJyk7XG4gICQoJ21haW4nKS5maW5kKCcudmlld2FibGUnKS5yZW1vdmVDbGFzcygndmlld2FibGUnKTtcbiAgJCgnI25ldy1yZWNpcGUtcGFnZScpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XG4gICQoJyNuZXctcmVjaXBlLXBhZ2UnKS5hZGRDbGFzcygndmlld2FibGUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlck5ld0xpc3RJdGVtKGVsZW1lbnQsIGtleVByZXNzZWQpIHtcbiAgaWYoa2V5UHJlc3NlZCA9PT0gJ0VudGVyJykge1xuICAgIGVsZW1lbnQuYWZ0ZXIoJzxsaT48aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIm5ldyBpdGVtXCI+PC9saT4nKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkUmVjaXBlKHN0YXRlKSB7XG4gIGxldCB0aXRsZSA9ICQoJyNyZWNpcGUtdGl0bGUnKS52YWwoKTtcbiAgbGV0IHRpbWUgPSAkKCcjcmVhZHktaW4tbWlucycpLnZhbCgpO1xuICBsZXQgaW5ncmVkaWVudHMgPSBbXTtcbiAgJCgnI2luZ3JlZGllbnRzJykuZmluZCgnaW5wdXQnKS5lYWNoKFxuICAgIChpbmRleCwgZWxlbWVudCkgPT4gaW5ncmVkaWVudHMucHVzaCgkKGVsZW1lbnQpLnZhbCgpKVxuICApO1xuXG4gIGxldCBzdGVwcyA9IFtdO1xuICAkKCcjc3RlcHMnKS5maW5kKCdpbnB1dCcpLmVhY2goXG4gICAgKGluZGV4LCBlbGVtZW50KSA9PiBzdGVwcy5wdXNoKCQoZWxlbWVudCkudmFsKCkpXG4gICk7XG5cbiAgc3RhdGUubXlSZWNpcGVzLnB1c2goe1xuICAgIHRpdGxlOiB0aXRsZSxcbiAgICByZWFkeUluTWludXRlczogdGltZSxcbiAgICBsaXN0b2ZJbmdyZWRpZW50czogaW5ncmVkaWVudHMsXG4gICAgaW5zdHJ1Y3Rpb25zOiBzdGVwc1xuICB9KTtcbn1cbiIsIi8vanNoaW50IGVzdmVyc2lvbjogNlxuXG5pbXBvcnQgKiBhcyByZWNpcGUgZnJvbSAnLi9tb2R1bGVzL3Nwb29uYWN1bGFyJztcbmltcG9ydCAqIGFzIGRyb3Bib3ggZnJvbSAnLi9tb2R1bGVzL2Ryb3Bib3gnO1xuaW1wb3J0ICogYXMgY3JlYXRlIGZyb20gJy4vbW9kdWxlcy9wYWdlcy1jcmVhdGUnO1xuXG5jb25zdCBSRURJUkVDVF9VUkkgPSAnaHR0cDovL2xvY2FsaG9zdC9zcG9vbi1uLWRyb3AvYnVpbGQvJztcbmZ1bmN0aW9uIGluaXRBcHBTdGF0ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN1bHRMaXN0OiBbXSxcbiAgICBjdXJyZW50VmlldzogJ3NlYXJjaCcsXG4gICAgcHJldmlvdXNIdG1sOiAnJyxcbiAgICBteVJlY2lwZXM6IFtdLC8vbGlzdCBvZiByZWNpcGUgb2Jqc1xuICAgIGxvZ2dlZEluOiBmYWxzZSxcbiAgICBhY2Nlc3NUb2tlbjogJydcbiAgfTtcbn1cblxuXG5mdW5jdGlvbiBtYWtlUmVzdWx0c0xpc3QocmVzdWx0T2JqLCBzdGF0ZSkge1xuICBsZXQgcHJldmlld0xpc3QgPSBbXTtcbiAgbGV0IHJlY2lwZUlkID0gJyc7XG4gICQuZWFjaChyZXN1bHRPYmouUmVjaXBlcywgZnVuY3Rpb24oaW5kLCBvYmopIHtcbiAgICByZWNpcGVJZCA9IG9iai5saW5rLnNwbGl0KCctJykucG9wKCk7XG4gICAgY29uc29sZS5sb2cocmVjaXBlSWQpO1xuICAgIC8vIHByZXZpZXdMaXN0LnB1c2goe1xuICAgIHN0YXRlLnJlc3VsdExpc3QucHVzaCh7XG4gICAgICB0aXRsZTogb2JqLm5hbWUsXG4gICAgICBpbWdVcmw6IG9iai5pbWFnZSxcbiAgICAgIGlkOiByZWNpcGVJZFxuICAgIH0pO1xuICB9KTtcbiAgLy8gc3RhdGUucmVzdWx0TGlzdCA9IHByZXZpZXdMaXN0O1xufVxuXG5mdW5jdGlvbiByZW5kZXJSZXN1bHRzTGlzdChzdGF0ZSl7XG4gIGxldCBwcmV2aWV3SHRtbCA9ICcnO1xuICAkLmVhY2goc3RhdGUucmVzdWx0TGlzdCwgZnVuY3Rpb24oaW5kLCBvYmopIHtcbiAgICBwcmV2aWV3SHRtbCArPSAnPGxpIGRhdGEtcmVjaXBlaWQ9XCInK29iai5pZCsnXCI+PGE+JytcbiAgICAnPGltZyBzcmM9XCInK29iai5pbWdVcmwrJ1wiIGFsdD1cIicrb2JqLnRpdGxlKydcIj4nK1xuICAgICc8c3Bhbj4nK29iai50aXRsZSsnPC9zcGFuPicrXG4gICAgJzxmb3JtPjxpbnB1dCB0eXBlPVwic3VibWl0XCI+PC9mb3JtPicrXG4gICAgJzwvbGk+PC9hPic7XG4gIH0pO1xuICAkKCcjc2VhcmNoLXJlc3VsdHMnKS5odG1sKHByZXZpZXdIdG1sKTtcbn1cblxuZnVuY3Rpb24gc2ltcGxpZnlSZWNpcGVEZXRhaWxzKHJlY2lwZU9iaikge1xuICAvKlJlZmVyIHRvICdnZXQtcmVjaXBlLWluZm8tc2FtcGxlLXJlc3BvbnNlLmpzb24nIGZvciByZWNpcGVPYmoncyBjb21wbGV0ZSBzdHJ1Y3R1cmUqL1xuICBsZXQgaW5ncmVkaWVudHMgPSBbXTtcbiAgJC5lYWNoKHJlY2lwZU9iai5leHRlbmRlZEluZ3JlZGllbnRzLCBmdW5jdGlvbihpbmQsIG9iaikge1xuICAgIGluZ3JlZGllbnRzLnB1c2goe1xuICAgICAgbmFtZTogb2JqLm5hbWUsXG4gICAgICBhbW91bnQ6IG9iai5hbW91bnQgKyBvYmoudW5pdExvbmdcbiAgICB9KTtcbiAgfSk7XG4gIGxldCBzdGVwcyA9IFtdO1xuICAkLmVhY2gocmVjaXBlT2JqLmFuYWx5emVkSW5zdHJ1Y3Rpb25zWzBdLnN0ZXBzLCBmdW5jdGlvbihpbmQsIG9iaikge1xuICAgIHN0ZXBzLnB1c2gob2JqLnN0ZXApO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0aXRsZTogcmVjaXBlT2JqLnRpdGxlLFxuICAgIHRpbWU6IHJlY2lwZU9iai5yZWFkeUluTWludXRlcyxcbiAgICBsaXN0b2ZJbmdyZWRpZW50czogaW5ncmVkaWVudHMsXG4gICAgaW5zdHJ1Y3Rpb25zOiBzdGVwc1xuICB9O1xufVxuXG5mdW5jdGlvbiByZW5kZXJSZWNpcGVEZXRhaWxzKHNpbXBsZVJlY2lwZU9iaiwgc3RhdGUpIHtcbiAgc3RhdGUucHJldmlvdXNIdG1sID0gJCgnbWFpbicpLmh0bWwoKTtcbiAgbGV0IHJlY2lwZUluZm9IdG1sID0nPHNwYW4+PGgxPicrXG4gICAgc2ltcGxlUmVjaXBlT2JqLnRpdGxlKyc8L2gxPicrXG4gICAgJzxoMj4nK3NpbXBsZVJlY2lwZU9iai50aW1lKydtaW51dGVzPC9oMj48L3NwYW4+PHVsPic7XG4gICQuZWFjaChzaW1wbGVSZWNpcGVPYmoubGlzdG9mSW5ncmVkaWVudHMsIGZ1bmN0aW9uKGluZCwgb2JqKSB7XG4gICAgcmVjaXBlSW5mb0h0bWwgKz0gJzxsaT4nK29iai5hbW91bnQrb2JqLm5hbWUrJzwvbGk+JztcbiAgfSk7XG4gIHJlY2lwZUluZm9IdG1sICs9ICc8L3VsPjxvbD4nO1xuICAkLmVhY2goc2ltcGxlUmVjaXBlT2JqLmluc3RydWN0aW9ucywgZnVuY3Rpb24oaW5kLHZhbCkge1xuICAgIHJlY2lwZUluZm9IdG1sICs9ICc8bGk+Jyt2YWwrJzwvbGk+JztcbiAgfSk7XG4gIHJlY2lwZUluZm9IdG1sICs9ICc8L29sPic7XG4gICQoJ21haW4nKS5odG1sKHJlY2lwZUluZm9IdG1sKTtcbn1cblxuXG4kKGZ1bmN0aW9uIG1haW4oKSB7XG4gIGxldCBhcHBTdGF0ZSA9IGluaXRBcHBTdGF0ZSgpO1xuICBsZXQgdG9rZW4gPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnYWNjZXNzVG9rZW4nKTtcblxuICBpZih0b2tlbiAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9rZW4gIT09IG51bGwpIHtcbiAgICBhcHBTdGF0ZS5sb2dnZWRJbiA9IHRydWU7XG4gIH1cblxuICBlbHNlIHtcbiAgICBsZXQgcmVkaXJlY3RSZXNwb25zZSA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcjJylbMV07XG4gICAgaWYodHlwZW9mIHJlZGlyZWN0UmVzcG9uc2UgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdhY2Nlc3NUb2tlbicsIHJlZGlyZWN0UmVzcG9uc2Uuc3BsaXQoJyYnKVswXS5zcGxpdCgnPScpWzFdKTtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKFJFRElSRUNUX1VSSSk7XG4gICAgICBhcHBTdGF0ZS5sb2dnZWRJbiA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgJCgnI3NlYXJjaC1mb3JtJykub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBsZXQgcXVlcnkgPSAkKHRoaXMpLmZpbmQoJyNzZWFyY2gtYmFyJykudmFsKCk7XG5cbiAgICBsZXQgeGhyUHJvbWlzZSA9IHJlY2lwZS5nZXRTZWFyY2hSZXN1bHRzKHF1ZXJ5KTtcbiAgICB4aHJQcm9taXNlLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIG1ha2VSZXN1bHRzTGlzdChkYXRhLGFwcFN0YXRlKTtcbiAgICAgIHJlbmRlclJlc3VsdHNMaXN0KGFwcFN0YXRlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgJCgnI3NlYXJjaC1yZXN1bHRzJykub24oJ2NsaWNrJywnbGknLGZ1bmN0aW9uKCkge1xuICAgIGxldCB4aHJQcm9taXNlID0gcmVjaXBlLmdldFJlY2lwZURldGFpbHMoJCh0aGlzKS5kYXRhKCdyZWNpcGVpZCcpKTtcbiAgICB4aHJQcm9taXNlLmRvbmUoXG4gICAgICBkYXRhID0+IHJlbmRlclJlY2lwZURldGFpbHMoc2ltcGxpZnlSZWNpcGVEZXRhaWxzKGRhdGEpLCBhcHBTdGF0ZSlcbiAgICApO1xuICB9KTtcblxuICAkKCcjbG9naW4nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICBpZighYXBwU3RhdGUubG9nZ2VkSW4pIHtkcm9wYm94Lk9BdXRoKCk7fVxuICB9KTtcblxuICAkKCcjbXktcmVjaXBlcycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIGlmKGFwcFN0YXRlLmxvZ2dlZEluKSB7XG4gICAgICBsZXQgeGhyID0gZHJvcGJveC5nZXRNeVJlY2lwZXMoKTtcbiAgICAgIHhoci50aGVuKFxuICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKGRhdGEpIHtcbiAgICAgICAgICBhcHBTdGF0ZS5teVJlY2lwZXMgPSBkYXRhO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiBlcnJvcihqcXhocikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGpxeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuICB9KTtcblxuICAkKCcjc2VhcmNoLWZvci1yZWNpcGVzJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXG4gIH0pO1xuXG4gICQoJyNjcmVhdGUtcmVjaXBlJykub24oJ2NsaWNrJywgKCkgPT4gY3JlYXRlLnJlbmRlclBhZ2UoKSApO1xuICAkKCcuY3JlYXRlLWxpc3QnKS5vbigna2V5cHJlc3MnLCAnbGknLFxuICBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBjcmVhdGUucmVuZGVyTmV3TGlzdEl0ZW0oJCh0aGlzKSwgZXZlbnQua2V5KTtcbiAgfSk7XG4gICQoJyNuZXctcmVjaXBlLXBhZ2UnKS5maW5kKCdmb3JtJykub24oJ2NsaWNrJywgJ2J1dHRvbicsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY3JlYXRlLmFkZFJlY2lwZShhcHBTdGF0ZSk7XG4gICAgICAvLyBsZXQgeGhyID0gZHJvcGJveC5kZWxldGVGaWxlSGVscGVyKCk7XG4gICAgICBkcm9wYm94LmRlbGV0ZUZpbGVIZWxwZXIoKS5hbHdheXMoXG4gICAgICAgIGRhdGEgPT4gZHJvcGJveC5wb3N0TXlSZWNpcGVzKGFwcFN0YXRlKS50aGVuKFxuICAgICAgICAgIGRhdGEgPT4gY29uc29sZS5sb2coJ1N1Y2Nlc3MnKSxcbiAgICAgICAgICBqcXhociA9PiBjb25zb2xlLmxvZyhqcXhoci5yZXNwb25zZVRleHQpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSk7XG59KTtcbiJdLCJuYW1lcyI6WyJSRURJUkVDVF9VUkkiLCJyZWNpcGUuZ2V0U2VhcmNoUmVzdWx0cyIsInJlY2lwZS5nZXRSZWNpcGVEZXRhaWxzIiwiZHJvcGJveC5PQXV0aCIsImRyb3Bib3guZ2V0TXlSZWNpcGVzIiwiY3JlYXRlLnJlbmRlclBhZ2UiLCJjcmVhdGUucmVuZGVyTmV3TGlzdEl0ZW0iLCJjcmVhdGUuYWRkUmVjaXBl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
