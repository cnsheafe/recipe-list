(function () {
'use strict';

// jshint esversion: 6
// See Spoonacular API documentation
const MASHAPE_KEY = 'AyBmxPBKYUmshcuDOEgra2staJv9p1Tm8cgjsnsk5j9j5dONbK';


function getSearchResults(userQuery){
  let ajaxSettings = {
    url: 'https://spoonacular-recipe-food-nutrition-v1.p.mashape.com/recipes/search',
    data: {
      query: userQuery,
      number: 25
    },
    dataType: 'json',
    headers: {
      'X-Mashape-Key': MASHAPE_KEY,
      Accept: 'application/json'
    }
  };
  return $.ajax(ajaxSettings);
}
function getRecipeDetails(id) {
  let ajaxSettings = {
    url: 'https://spoonacular-recipe-food-nutrition-v1.p.mashape.com/recipes/'+id+'/information',
    data: {
      includeNutrition: false
    },
    dataType: 'json',
    headers: {
      'X-Mashape-Key': MASHAPE_KEY,
      Accept: 'application/json'
    }
  };
  return $.ajax(ajaxSettings);
}

const LOCAL_URL = "http://localhost/spoon-n-drop/build/pages/";

// jshint esversion:6
// See Dropbox APi v2 HTTP documentation
const CLIENT_ID = 'myj4y8uy5mlsg9s';
const REDIRECT_URI$1 = LOCAL_URL || 'https://cnsheafe.github.io/spoon-n-drop/build/';
const STORAGE_PATH = '/my-recipes.json';

function OAuth(){
  let url = 'https://www.dropbox.com/oauth2/authorize?'+
  'response_type=token&'+
  'client_id='+CLIENT_ID+'&'+
  'redirect_uri='+REDIRECT_URI$1;
  window.location.replace(url);
}
/*GET and param urls used to avoid CORS pre-flight*/
function getMyRecipes() {
  let ajaxSettings = {
    url: 'https://content.dropboxapi.com/2/files/download',
    method: 'GET',
    dataType: 'json',
    data: {
      authorization: 'Bearer '+ window.sessionStorage.getItem('accessToken'),
      arg: JSON.stringify({path: STORAGE_PATH}),
      reject_cors_preflight: true
    }
  };
  return $.ajax(ajaxSettings);
}

function deleteFileHelper() {
  let ajaxSettings = {
    url: 'https://api.dropboxapi.com/2/files/delete',
    method: 'POST',
    dataType: 'json',
    contentType: 'application/json',
    data: JSON.stringify({path: STORAGE_PATH}),
    headers : {
      Authorization: 'Bearer '+window.sessionStorage.getItem('accessToken')
    }
  };
  return $.ajax(ajaxSettings);
}

function postMyRecipes(state) {
  let ajaxSettings = {
    url: 'https://content.dropboxapi.com/2/files/upload',
    method: 'POST',
    contentType: 'application/octet-stream',
    data: JSON.stringify(state.myRecipes),
    headers: {
      Authorization: 'Bearer '+window.sessionStorage.getItem('accessToken'),
      'Dropbox-API-Arg': JSON.stringify({path: STORAGE_PATH})
    }
  };
  return $.ajax(ajaxSettings);
}

// jshint esversion:6

function addRecipe() {
  let title = $('#recipe-title').val();
  let time = $('#ready-in-mins').val();
  let ingredients = []; //{name, amount}
  let $ingredientName;
  $('#ingredients').find('li').each(function (index,element) {
    ingredients.push({
      name: $(element).find('.ingredient-name').val(),
      amount: $(element).find('.ingredient-amount').val()
    });
  });

  let steps = [];
  $('#steps').find('input').each(
    (index, element) => steps.push($(element).val())
  );

  return {
    title: title,
    readyInMinutes: time,
    listofIngredients: ingredients,
    instructions: steps
  };
}

function newListItem($element, keyPressed) {
  if(keyPressed === 'Enter') {
    if ($element.hasClass('ingredient')) {
    $element.after(`
      <li class="ingredient input-group">
        <span class="col-xs-8 col-xs-offset-1">
				  <input type="text" class="ingredient-name form-control" placeholder="ingredient">
        </span>
        <span class="col-xs-3">
			     <input type="text" class="ingredient-amount form-control" placeholder="">
        <span>Amount</span>
        </span>
			</li>
    `);
    }
    else {
      $element.after(
        `<li class="col-xs-12">
            <input type="text" class="form-control" placeholder="First step">
          </li>`
      );
    }
  }
}

// jshint esversion:6
function storeResults(apiResult, state) {
  state.resultList = apiResult.results;
  state.sessionResults.push({
    currentQuery: state.currentQuery,
    baseUri: apiResult.baseUri
  });
  state.baseImgUri = apiResult.baseUri;
}

function simplifyRecipe(recipeObj) {
  /*Refer to 'get-recipe-info-sample-response.json' for recipeObj's complete structure*/
  let ingredients = [];
  $.each(recipeObj.extendedIngredients, function(ind, obj) {
    ingredients.push({
      name: obj.name,
      amount: obj.amount + obj.unitLong
    });
  });
  let steps = [];
  if (typeof recipeObj.analyzedInstructions[0] !== 'undefined') {
    $.each(recipeObj.analyzedInstructions[0].steps, function(ind, obj) {
      steps.push(obj.step);
    });
  }
  return {
    title: recipeObj.title,
    readyInMinutes: recipeObj.readyInMinutes,
    listofIngredients: ingredients,
    instructions: steps
  };
}

// jshint esversion:6

function showList(state) {
  const $myRecipes = $('#my-recipes-page');
  let html = '';

  $.each(state.myRecipes, function(index, recipeObj) {
    html += '<li class="my-recipe-list-item">' +
    '<h2>'+recipeObj.title+'</h2>'+
    '<div>' +'<span>'+recipeObj.readyInMinutes+' mins</span>'+
    '<button class="edit-recipe">Edit</button>'+
    '<button class="delete-recipe">Delete</button></li>';
  });
  $myRecipes.find('ul').html(html);

}

// jshint esversion:6
// Is used on more than one 'page'
function showRecipe($selector, recipe) {
  console.log(recipe);
  let recipeInfo =
    `<div class="recipe-header row">
      <div class="col-xs-8 col-xs-offset-2">
        <h2>${recipe.title}</h2>
        <span class="glyphicon glyphicon-time"></span>
        <span>${recipe.readyInMinutes}</span>
      </div>
    </div>
    <div class="row">
      <h3 class="col-xs-8 col-xs-offset-2">Ingredients</h3>
      <ul class="col-xs-8 col-xs-offset-2 input-group list-group">`;

  $.each(recipe.listofIngredients, function(ind, ingredient) {
    recipeInfo +=
      `<li class="list-group-item row">
        <input type="checkbox" class="col-xs-1">
        <span class="col-xs-10">
          ${ingredient.amount} ${ingredient.name}
        </span>
      </li>`;
  });
  recipeInfo +=
    `</ul></div>
    <div class="row">
      <h3 class="col-xs-8 col-xs-offset-2">Directions</h3>
      <ol class="col-xs-8 col-xs-offset-2 input-group list-group">`;
  $.each(recipe.instructions, function(ind,val) {
    recipeInfo +=
    `<li class="list-group-item row">
      <input type="checkbox" class="col-xs-1">
      <span class="col-xs-10">
        ${val}
      </span>
    </li>`;
  });
  recipeInfo += '</ol></div>';

  $selector.html(recipeInfo);
}

function switchView($pageView) {
  $('#search-page').addClass('hide');
  $('#new-recipe-page').addClass('hide');
  $('#my-recipes-page').addClass('hide');
  $('#single-recipe-page').addClass('hide');
  $pageView.removeClass('hide');
}

function switchActiveTab($tab) {
  $('#search-for-recipes').removeClass('active');
  $('#create-recipe').removeClass('active');
  $('#my-recipes').removeClass('active');
  $tab.addClass('active');
}

// jshint esversion: 6
function showSearchResults(state){
  let previewHtml = '';
  $.each(state.resultList, (ind, result) => {
    previewHtml +=
    `<li class="row" data-recipeid=${result.id}>
      <span class="col-xs-4 ">
        <img src=${state.baseImgUri}${result.image}
        class="img-responsive"
        alt="${result.title}"></img>
      </span>
      <span class="col-xs-8 result-preview">
        <h3>${result.title}</h3>
        <span class="glyphicon glyphicon-time"></span>
        <span>${result.readyInMinutes}</span>
      </span>
    </li>`;
  });
  $('#search-results').html(previewHtml);
}

//jshint esversion: 6
// Main controller file that handles all event handlers
// Using rollup for modules
// command "rollup -c"

const REDIRECT_URI = LOCAL_URL || 'https://cnsheafe.github.io/spoon-n-drop/build/';
console.log(REDIRECT_URI);
function initAppState() {
  return {
    sessionResults: [],
    currentQuery: '',
    resultList: [],
    myRecipes: [], //list of recipe objs
    loggedIn: false,
    currentRecipe: {}
  };
}
// Checks if user already has access token in session storage
function userHasAccessToken(token) {
  if(token !== 'undefined' && token !== null) {return true;}
  else {
    let redirectResponse = window.location.href.split('#')[1];
    if(typeof redirectResponse != 'undefined') {
      window.sessionStorage.setItem('accessToken', redirectResponse.split('&')[0].split('=')[1]);
      window.location.href(REDIRECT_URI);
      return true;
    }
    else {return false;}
  }
}

$(function main() {
  let appState = initAppState();
  let token = window.sessionStorage.getItem('accessToken');

  if(userHasAccessToken(token)) {
    appState.loggedIn = true;
    $('#login').find('h2').text('Logged In');
  }

  $('#login').on('click', () => { if(!appState.loggedIn) {OAuth();} });

  $('#search-for-recipes').on('click',function() {
    switchView($('#search-page'));
    switchActiveTab($(this));
  });

  $('#search-form').on('submit', function(event) {
    event.preventDefault();
    let query = $(this).find('#search-bar').val();
    getSearchResults(query).done(function (data) {
      storeResults(data, appState);
      showSearchResults(appState);
    });
  });

  $('#search-results').on('click','li', function() {
    let xhr = getRecipeDetails($(this).data('recipeid'));
    xhr.done( function (data) {
      const $recipePage = $('#single-recipe-page');
      switchView($recipePage);
      $('#add-to-my-recipes').removeClass('hide');
      appState.currentRecipe = simplifyRecipe(data);
      showRecipe($recipePage.find('.recipe-container'), appState.currentRecipe);
    });
  });

  $('#create-recipe').on('click', function () {
    switchView($('#new-recipe-page'));
    $('#add-to-my-recipes').removeClass('hide');
    switchActiveTab($(this));
  });

  $('#my-recipes').on('click', function () {
    if(appState.loggedIn) {
      getMyRecipes().then(
        data => {
          appState.myRecipes = data;
          console.log(appState.myRecipes);
          switchView($('#my-recipes-page'));
          switchActiveTab($(this));
          showList(appState);
        },
        jqxhr => console.log(jqxhr.responseText)
      );
    }
  });

  $('#my-recipes-page').on('click', '.my-recipe-list-item', function() {
    const position = $('#my-recipes-page').find('li').index($(this));
    switchView($('#single-recipe-page'));
    $('#add-to-my-recipes').addClass('hide');
    showRecipe(
      $('#single-recipe-page').find('.recipe-container'), appState.myRecipes[position]
    );
  });
  $('#my-recipes-page').on('click', '.edit-recipe', function() {
    const position = $('#my-recipes-page').find('.edit-recipe').index($(this));
    switchView($('#create-recipe-page'));
  });

  $('#my-recipes-page').on('click', '.delete-recipe', function (event) {
    event.stopPropagation();
    const index = $('.delete-recipe').index($(this));
    appState.myRecipes.splice(index,1);
    deleteFileHelper().always(
      data => postMyRecipes(appState).then(
        data => {console.log('Success');showList(appState);},
        jqxhr => console.log(jqxhr.responseText)
      )
    );
  });

  $('#new-recipe-page').find('form').on('click', 'button', function(event) {
    event.preventDefault();
    appState.myRecipes.push(addRecipe());

    deleteFileHelper().always(
      data => postMyRecipes(appState).then(
        data => $(this).text('Added to My Recipes'),
        jqxhr => console.log(jqxhr.responseText)
      )
    );
  });

  $('.create-list').on('keypress', 'li', function (event) {
    newListItem($(this), event.key);
    $(this).next().find('.ingredient-name').focus();
    console.log($(this));
    console.log($(this).next());
  });

  $('#single-recipe-page').on('click', '#add-to-my-recipes', function() {
    appState.myRecipes.push(appState.currentRecipe);
    console.log(appState.myRecipes);
    deleteFileHelper().always(
      data => postMyRecipes(appState).then(
        data => console.log('Success'),
        jqxhr => console.log(jqxhr.responseText)
      )
    );
    $(this).text('In My Recipes');
  });
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
